openapi: 3.1.0
info:
  version: 1.0.0
  title: AyatDigital Open API Spec
  termsOfService: https://ayatdigital.com/about/privacypolicy/
  contact:
    email: dev@ayatdigital.com
    url: https://www.ayatdigital.com/contact/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  x-logo:
    url: https://avatars.githubusercontent.com/u/95576984?v=4
  description: >
    # Introduction

    This API definition is intended to to be a good starting point for
    describing your API in 

    [OpenAPI/Swagger
    format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md).

    [Redoc](https://github.com/Redocly/Redoc) documentation engine. So beyond
    the standard OpenAPI syntax we use a few 

    [vendor
    extensions](https://github.com/Redocly/Redoc/blob/master/docs/redoc-vendor-extensions.md).


    # OpenAPI Specification

    The goal of The OpenAPI Specification is to define a standard,
    language-agnostic interface to REST APIs which

    allows both humans and computers to discover and understand the capabilities
    of the service without access to source

    code, documentation, or through network traffic inspection. When properly
    defined via OpenAPI, a consumer can 

    understand and interact with the remote service with a minimal amount of
    implementation logic. Similar to what

    interfaces have done for lower-level programming, OpenAPI removes the
    guesswork in calling the service.
externalDocs:
  description: Find out how to create a GitHub repo for your OpenAPI definition.
  url: https://github.com/Rebilly/generator-openapi-repo
servers:
  - url: https://dev.ayatdigital.com
  - url: https://example.com/api/v1
paths:
  /events:
    get:
      operationId: GetAllEvents
      tags:
        - Event
      summary: Get all events
      description: Get all events from the database
      parameters:
        - name: pageNumber
          in: query
          description: The pages to return events information
          schema:
            type: integer
          required: false
        - name: pageSize
          in: query
          description: The number of events to be returned in a page
          schema:
            type: integer
            example: 9
          required: false
      responses:
        '200':
          description: Fetched all events successfully
          content:
            application/json:
              schema:
                properties:
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/getEvent'
                  total_events:
                    description: Total number of events stored in the database
                    type: integer
                    example: 1
        '404':
          description: Not Found
        '503':
          description: Server Error